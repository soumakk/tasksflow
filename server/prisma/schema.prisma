// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  name            String
  password        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isAdmin         Boolean  @default(false)
  isEmailVerified Boolean  @default(false)

  // relations
  tokens   Token[]
  spaces   Space[]
  statuses Status[]
  tags     Tag[]
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invitation {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Space {
  id        Int      @id @default(autoincrement())
  title     String
  icon      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int

  tasks Task[]
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  priority    Priority
  dueDate     DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status   Status @relation(fields: [statusId], references: [id])
  statusId Int

  tags Tag[] @relation("TaskTags")

  space   Space @relation(fields: [spaceId], references: [id])
  spaceId Int

  subTasks SubTask[]
}

model SubTask {
  id        Int     @id @default(autoincrement())
  title     String
  completed Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task   Task @relation(fields: [taskId], references: [id])
  taskId Int
}

model Status {
  id    Int    @id @default(autoincrement())
  name  String
  color String

  tasks Task[]

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String
  color String

  tasks Task[] @relation("TaskTags")

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

enum Priority {
  URGENT
  HIGH
  NORMAL
  LOW
}
