// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  name       String
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  tokens     Token[]
}

model Token {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  expires_at DateTime
}

model Space {
  id    Int     @id @default(autoincrement())
  title String
  icon  String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  statuses Status[]
  tags     Tag[]
  tasks    Task[]
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  priority    Priority
  due_date    DateTime

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  status   Status @relation(fields: [statusId], references: [id])
  statusId Int

  tags Tag[] @relation("TaskTags")

  space   Space @relation(fields: [spaceId], references: [id])
  spaceId Int

  subTasks SubTask[]
}

model SubTask {
  id        Int     @id @default(autoincrement())
  title     String
  completed Boolean

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  task   Task @relation(fields: [taskId], references: [id])
  taskId Int
}

model Status {
  id    Int    @id @default(autoincrement())
  name  String
  color String

  space   Space @relation(fields: [spaceId], references: [id])
  spaceId Int

  tasks Task[]
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String
  color String

  space   Space @relation(fields: [spaceId], references: [id])
  spaceId Int

  tasks Task[] @relation("TaskTags")
}

enum Priority {
  URGENT
  HIGH
  NORMAL
  LOW
}
